<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet"
    href="https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.css"
    integrity="sha384-q94+BZtLrkL1/ohfjR8c6L+A6qzNH9R2hBLwyoAfu3i/WCvQjzL2RQJ3uNHDISdU"
    crossorigin="anonymous">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2"
    crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js"
    integrity="sha384-8Vi8VHwn3vjQ9eUHUxex3JSN/NFqUg3QbPyX8kWyb93+8AC/pPWTzj+nHtbC5bxD"
    crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js" integrity="sha384-s3XgLpvmHyscVpijnseAmye819Ee3yaGa8NxstkJVyA6nuDFjt59u1QvuEl/mecz" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="public/master.css">
  </head>
  <body>
    <div class="row">
      <div id="chessboard" class="col-6">
        <div id="myBoard" style="width: 750px;"></div>
        <button id="history">history</button>

      </div>
      <div id="rightPanel" class="col-4">


        <h1>Moves</h1>
        <div id="allMoves" class="overflow-auto">


        </div>

        <!-- <div id="controls"> -->


        <!-- <button id="recordButton">Record</button>
             <button id="transcribeButton" disabled>Stop and upload to server</button>-->


        <div id="buttons">
          <input type="image" src="mic.png" id="recordButton"/>
          <div id="output"></div>


        </div>


        </div>


      </div>

    </div>








    <script src="https://cdn.rawgit.com/mattdiamond/Recorderjs/08e7abd9/dist/recorder.js"></script>


    <script type="text/javascript">


      var board = null

      const history = document.getElementById("history");

      history.addEventListener("click",function(){
        notInHistory = false;




        const options = {
          method: 'POST',
          body: JSON.stringify("getHistory")
        };
        fetch('http://localhost:3000/history', options).then(async history => {
          board = Chessboard('myBoard', 'start')
          let getMoves = await history.text();
          getMoves = JSON.parse(getMoves);
          for(let i = 0; i < getMoves.length - 1; i+=2){

            setTimeout(function () {
              let moveFromWhite = getMoves[i].from
              let moveToWhite = getMoves[i].to


              let moveFromBlack = getMoves[i+1].from
              let moveToBlack = getMoves[i+1].to

              let move = moveFromWhite.toLowerCase() + "-" + moveToWhite.toLowerCase() + moveFromBlack.toLowerCase() + "-" + moveToBlack.toLowerCase();
              console.log('loop#'+i);

              makeMove(move);

            }, 2000 * (i/2));

          }
          setTimeout(function () {
             notInHistory = true;
          }, getMoves.length/2 * 2000 + 1500);


        })




      });


      board = Chessboard('myBoard', 'start')


      let rec = null;
      let audioStream = null;

      const recordButton = document.getElementById("recordButton");
      //const transcribeButton = document.getElementById("transcribeButton");


      let recording = false;

      recordButton.addEventListener("click", recOrStop);
      //transcribeButton.addEventListener("click", transcribeText);

      function recOrStop() {
        if(recording == true) {
          transcribeText();
          recording = false;
        } else if(recording == false) {
          startRecording();
          recording = true;
        }
      }

      function startRecording() {
          recordButton.src="micRec.png";

          let constraints = { audio: true, video:false }



          navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
              const audioContext = new window.AudioContext();
              audioStream = stream;
              const input = audioContext.createMediaStreamSource(stream);
              rec = new Recorder(input, { numChannels: 1 })
              rec.record()
              document.getElementById("output").innerHTML = "Recording started..."
          }).catch(function(err) {
              recordButton.disabled = false;
              transcribeButton.disabled = true;
          });
      }

      function transcribeText() {
          recordButton.src="mic.png";
          document.getElementById("output").innerHTML = "Converting recorded to chess moves..."
          rec.stop();
          audioStream.getAudioTracks()[0].stop();
          rec.exportWAV(uploadSoundData);
      }

      function checkRocke(move) {
        if(move == "e1-g1"){
          //white king side rocke
          board.move("h1-f1")
        } else if (move == "e1-c1"){
          //white queen side rocke
          board.move("a1-d1")
        } else if (move == "e8-g8"){
          //black king side rocke
          board.move("h8-f8")
        } else if (move == "e8-c8"){
          //black queen side rocke
          board.move("a8-d8")
        }


      }


      function isItPawn(square){
        return new Promise(function(resolve, reject){

          try {
            if ( (document.querySelector("[data-square=" + square + "] img").getAttribute("data-piece") == "wP" ) ||
            (document.querySelector("[data-square=" + square + "] img").getAttribute("data-piece") == "bP" ) ) {
              resolve(true)
            } else{
              resolve(false)
            }
          } catch(e){
            //console.log("selector is NULL");

            resolve(false)
          }

        })
      }

      function isMoveDiagonal(move){
        return new Promise(function(resolve, reject){
          if(move.charCodeAt(0) != move.charCodeAt(3)){
            resolve(true);
          } else{
            resolve(false);
          }
        })

      }

      function isCellEmpty(square){
        //console.log(square);
        return new Promise(function(resolve, reject){

          if (document.body.contains(document.querySelector("[data-square=" + square + "] img") ) ){
            resolve(false)
            //console.log("resolved isCellEmpty");
          } else{
            resolve(true)
          }

        })
      }
      let isPawn = false;
      async function checkEnPassant(move){

        let square = move.substring(0,2);
        //console.log(square);
        isPawn = false;
        let diagonalMove = false;
        let cellEmpty = true;
        isPawn = await isItPawn(square);

        if(isPawn){
          //console.log("its a pawn!!");
          diagonalMove = await isMoveDiagonal(move);
          if(diagonalMove){
            //console.log("pawn did a capture");

            cellEmpty = await isCellEmpty(move.substring(3,5));

            if (cellEmpty){
              console.log("enPassant detected");
              return true;
            } else{
              //console.log("pawn did a normal capture");
              return false;
            }


          }else{
            //console.log("pawn just moved forward");
            return false;
          }

        } else{
          //console.log("its NOT a pawn");
          return false;
        }


      }


      let moveHistory = "";
      let numberOfMoves = 1;
      let notInHistory = true;

      const box = document.getElementById("allMoves");

      function makeMove(move) {

        if(notInHistory){
          moveHistory += numberOfMoves + ". " + move.substring(0,5) + "   " + move.substring(5,10) + "\n"
          numberOfMoves++
          box.innerHTML = moveHistory

        } else {


          // var audio = new Audio('/pianoNotes/'+move.substring(0,1)+'.mp3');
          // audio.play();
          // setTimeout(function () {
          //   var audio = new Audio('/pianoNotes/'+move.substring(3,4)+'.mp3');
          //   audio.play();
          // }, 250);
          // setTimeout(function () {
          //   var audio = new Audio('/pianoNotes/'+move.substring(5,6)+'.mp3');
          //   audio.play();
          // }, 1000);
          // setTimeout(function () {
          //   var audio = new Audio('/pianoNotes/'+move.substring(8,9)+'.mp3');
          //   audio.play();
          // }, 1250);
        }

        checkEnPassant(move.substring(0,5)).then((enPassant) => {
          if(enPassant){
            board.move(move.substring(0,2) + "-" + move.substring(3,4) + move.substring(1,2));
            board.move(move.substring(3,4) + move.substring(1,2) + "-" + move.substring(3,5));

          }else{
            board.move(move.substring(0,5))
            checkRocke(move.substring(0,5))
          }

          if(!notInHistory){
            if(isPawn){
              var audio = new Audio('/pianoNotes/oct4cello/'+move.substring(0,1)+'.mp3');
              audio.play();
            } else {
              var audio = new Audio('/pianoNotes/oct6violin/'+move.substring(0,1)+'.mp3');
              audio.play();
            }

            console.log("note_"+move.substring(0,1)+".mp3");
            setTimeout(function () {
              var audio = new Audio('/pianoNotes/oct1dbass/'+move.substring(3,4)+'.mp3');
              audio.play();
              console.log("note_"+move.substring(3,4)+".mp3");
            }, 500);
          }

        })




        console.log("White played: "+ move.substring(0,5));

        setTimeout(function () {
          //checkEnPassant(move.substring(5,10))

          checkEnPassant(move.substring(5,10)).then( (enPassant) => {
            if(enPassant){
              console.log("making enPassant moves");

              let patternOne = move.substring(5,7) + "-" + move.substring(8,9) + move.substring(6,7)
              let patternTwo = move.substring(8,9) + move.substring(6,7) + "-" + move.substring(8,10)

              board.move(patternOne)
              board.move(patternTwo)

              //console.log(patternOne +"_fMove");
              //console.log(patternTwo +"_fMove");

            }else{
              board.move(move.substring(5,10))
              checkRocke(move.substring(5,10))
            }
            if(!notInHistory){
              if (isPawn) {
                var audio = new Audio('/pianoNotes/oct4cello/'+move.substring(5,6)+'.mp3');
                audio.play();
              } else{
                var audio = new Audio('/pianoNotes/oct6violin/'+move.substring(5,6)+'.mp3');
                audio.play();
              }
              console.log("note_"+move.substring(5,6)+".mp3");
              setTimeout(function () {
                var audio = new Audio('/pianoNotes/oct1dbass/'+move.substring(8,9)+'.mp3');
                audio.play();
                console.log("note_"+move.substring(8,9)+".mp3");
              }, 500);
            }
          })

          console.log("Black played: "+ move.substring(5,10));
        }, 1000);
      }
      //remove pieces document.querySelector("[data-square='e1'] img").remove();

      function uploadSoundData(blob) {
          //console.log("got the blob");
          const filename = "sound-file.wav";
          const formData = new FormData();
          formData.append("audio_data", blob, filename);

          fetch('http://localhost:3000/notes', {
              method: 'POST',
              body: formData
          }).then(async result => {

              chessMove = await result.text()

              if(chessMove == "wrong move"){
                document.getElementById("output").innerHTML = "Illegal move try again";
              } else{
                previousMove = board.fen();


                makeMove(chessMove);
                // document.querySelector("[data-square=" + chessMove.substring(0,2) + "]" ).style.backgroundColor = "red"
                // document.querySelector("[data-square=" + chessMove.substring(0,2) + "]" ).style.opacity = "0.5";
                // document.querySelector("[data-square=" + chessMove.substring(3,5) + "]" ).style.backgroundColor = "green"
                // document.querySelector("[data-square=" + chessMove.substring(3,5) + "]" ).style.opacity = "0.5";



                document.getElementById("output").innerHTML = "Received successfully: " + chessMove.substring(0,5);
              }



          }).catch(error => {
              document.getElementById("output").innerHTML = "An error occurred: " + error;
          })


      }



    </script>
  </body>
</html>
